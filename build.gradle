buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
		problemSpringWebVersion = '0.22.1'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-validation')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.zalando:problem-spring-web:${problemSpringWebVersion}")
	
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

// Ensure the Java compiler uses UTF-8.
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// Eclipse setup

// Workaround until https://github.com/gradle/gradle/issues/898
// is resolved.

// Several files have UTF-8 encoding and Eclipse running on Windows
// will have trouble unless we tell it to use UTF-8 encoding. This
// setting needs to go into the org.eclipse.core.resources.prefs file,
// which the project script isn't set up to configure.
eclipse {

  ext.corePrefsPath = '.settings/org.eclipse.core.resources.prefs'

  ext.genCorePrefs = {
    File corePrefs = file(corePrefsPath)
    corePrefs.parentFile.mkdirs()
    corePrefs.text = """\
    eclipse.preferences.version=1
    encoding/<project>=UTF-8
    """.stripIndent()
  }

  project {
    file {
      // Will be applied when the project is imported into Eclipse.
      genCorePrefs()
    }
  }

  // Will be applied after the eclipseProject task.
  eclipseProject.doLast {
    genCorePrefs()
  }

  // Will be applied after the cleanEclipse task.
  cleanEclipse.doLast {
    delete corePrefsPath
  }
}

tasks.eclipse.dependsOn(cleanEclipse)
